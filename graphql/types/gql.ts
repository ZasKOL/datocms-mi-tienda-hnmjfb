/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "query Home($locale: SiteLocale, $fallbackLocale: [SiteLocale!]) {\n  home(locale: $locale, fallbackLocales: $fallbackLocale) {\n    seo: _seoMetaTags {\n      attributes\n      content\n      tag\n    }\n    sections {\n      ... on RecordInterface {\n        id\n        __typename\n      }\n      ... on HeroSectionRecord {\n        ...HeroSection\n      }\n      ... on DividerSectionRecord {\n        ...DividerSection\n      }\n      ... on TestimonialSectionRecord {\n        ...TestimonialSection\n      }\n      ... on CollectionCardShowcaseSectionRecord {\n        ...CollectionCardShowcase\n      }\n      ... on MaterialShowcaseSectionRecord {\n        ...MaterialShowcase\n      }\n    }\n  }\n}": types.HomeDocument,
    "query LegalPage($slug: String, $locale: SiteLocale, $fallbackLocale: [SiteLocale!]) {\n  legalPage(\n    filter: {slug: {eq: $slug}}\n    locale: $locale\n    fallbackLocales: $fallbackLocale\n  ) {\n    seo: _seoMetaTags {\n      attributes\n      content\n      tag\n    }\n    content {\n      value\n    }\n  }\n}": types.LegalPageDocument,
    "query Layout($locale: SiteLocale, $fallbackLocale: [SiteLocale!]) {\n  _site {\n    faviconMetaTags {\n      attributes\n      content\n      tag\n    }\n    globalSeo {\n      fallbackSeo {\n        title\n        description\n      }\n    }\n    favicon {\n      url\n    }\n  }\n  layout(locale: $locale, fallbackLocales: $fallbackLocale) {\n    copyrightText\n    socialMediaLinks {\n      id\n      name\n      url\n      icon {\n        url\n      }\n    }\n    footerSubtitle\n    footerTitle\n    footerLogo {\n      responsiveImage {\n        src\n      }\n    }\n    footerColumns {\n      id\n      label\n      footerItem {\n        id\n        label\n        slug\n      }\n    }\n    cookieNotice {\n      primaryButtonLabel\n      secondaryButtonLabel\n      subheader\n      header\n      cookieNoticeImage {\n        responsiveImage {\n          ...DatoImage_responsiveImage\n        }\n      }\n    }\n    mainColor {\n      red\n      blue\n      green\n    }\n    popup {\n      title\n      underText\n      subtitle\n      preTitle\n      dismissButtonLabel\n      button {\n        label\n        slug\n      }\n      popupImage {\n        responsiveImage {\n          ...DatoImage_responsiveImage\n        }\n      }\n    }\n    logo {\n      url\n      responsiveImage {\n        ...DatoImage_responsiveImage\n      }\n    }\n    notification {\n      value\n    }\n    menu {\n      ... on DropdownMenuRecord {\n        id\n        label\n        _modelApiKey\n        column {\n          label\n          id\n          item {\n            ... on ProductRecord {\n              slug\n              _modelApiKey\n              id\n              name\n            }\n            ... on MaterialRecord {\n              slug\n              id\n              _modelApiKey\n              name\n            }\n            ... on CollectionRecord {\n              slug\n              id\n              _modelApiKey\n              name\n            }\n            ... on BrandRecord {\n              slug\n              id\n              _modelApiKey\n              name\n            }\n          }\n        }\n        trending {\n          ... on MaterialRecord {\n            id\n            name\n            slug\n            _modelApiKey\n            details {\n              image {\n                responsiveImage {\n                  ...DatoImage_responsiveImage\n                }\n              }\n            }\n          }\n          ... on CollectionRecord {\n            id\n            name\n            slug\n            _modelApiKey\n            details {\n              image {\n                responsiveImage {\n                  ...DatoImage_responsiveImage\n                }\n              }\n            }\n          }\n          ... on BrandRecord {\n            id\n            name\n            slug\n            _modelApiKey\n            details {\n              image {\n                responsiveImage {\n                  ...DatoImage_responsiveImage\n                }\n              }\n            }\n          }\n        }\n        newArrival {\n          ... on MaterialRecord {\n            id\n            name\n            slug\n            _modelApiKey\n            details {\n              image {\n                responsiveImage {\n                  ...DatoImage_responsiveImage\n                }\n              }\n            }\n          }\n          ... on CollectionRecord {\n            id\n            name\n            slug\n            _modelApiKey\n            details {\n              image {\n                responsiveImage {\n                  ...DatoImage_responsiveImage\n                }\n              }\n            }\n          }\n          ... on BrandRecord {\n            id\n            name\n            slug\n            _modelApiKey\n            details {\n              image {\n                responsiveImage {\n                  ...DatoImage_responsiveImage\n                }\n              }\n            }\n          }\n        }\n      }\n      ... on LinkItemRecord {\n        id\n        label\n        slug\n        _modelApiKey\n      }\n    }\n  }\n  _site {\n    locales\n  }\n  generalInterface(locale: $locale, fallbackLocales: $fallbackLocale) {\n    currencySymbol\n    trending\n    new\n    shopNow\n    searchPlaceholder\n    newsletter\n    subscribeToOurNewsletter\n    newsletterButton\n    emailPlaceholder\n    displayNewsletterFooter\n  }\n}": types.LayoutDocument,
    "query Showcase($locale: SiteLocale, $fallbackLocale: [SiteLocale!]) {\n  generalInterface(locale: $locale, fallbackLocales: $fallbackLocale) {\n    currencySymbol\n  }\n  showcase(locale: $locale, fallbackLocales: $fallbackLocale) {\n    seo: _seoMetaTags {\n      attributes\n      content\n      tag\n    }\n    title\n    newProductsTitle\n    newProducts {\n      id\n      slug\n      sale\n      salePrice\n      name\n      productImages {\n        responsiveImage {\n          ...DatoImage_responsiveImage\n        }\n        copyright\n      }\n      price\n    }\n    materialsTitle\n    materialsDisplay {\n      responsiveImage {\n        ...DatoImage_responsiveImage\n      }\n    }\n    materialsDescription\n    description\n    displays {\n      responsiveImage {\n        ...DatoImage_responsiveImage\n      }\n    }\n    cta {\n      id\n      label\n      slug\n    }\n    collections {\n      name\n      slug\n      id\n      details {\n        image {\n          responsiveImage {\n            ...DatoImage_responsiveImage\n          }\n        }\n      }\n    }\n    collectionsCta {\n      label\n      slug\n      id\n    }\n  }\n}": types.ShowcaseDocument,
    "query Stores($locale: SiteLocale, $fallbackLocale: [SiteLocale!]) {\n  allStores(locale: $locale, fallbackLocales: $fallbackLocale) {\n    seo: _seoMetaTags {\n      attributes\n      content\n      tag\n    }\n    country\n    id\n    storeDescription\n    storeName\n    storeLocation {\n      latitude\n      longitude\n    }\n    storeImage {\n      responsiveImage {\n        src\n      }\n    }\n  }\n  generalInterface(locale: $locale, fallbackLocales: $fallbackLocale) {\n    findOnMaps\n  }\n}": types.StoresDocument,
    "query Locales {\n  _site {\n    locales\n  }\n}": types.LocalesDocument,
    "fragment DatoImage_responsiveImage on ResponsiveImage {\n  src\n  srcSet\n  base64\n  width\n  height\n  alt\n  title\n}": types.DatoImage_ResponsiveImageFragmentDoc,
    "fragment DividerSection on DividerSectionRecord {\n  id\n  _modelApiKey\n  title\n  subtitle\n  preTitle\n  button {\n    label\n    slug\n  }\n}": types.DividerSectionFragmentDoc,
    "fragment HeroSection on HeroSectionRecord {\n  _modelApiKey\n  id\n  heroSubtitle\n  heroTitle\n  heroImage {\n    responsiveImage {\n      ...DatoImage_responsiveImage\n    }\n  }\n  additionalImage {\n    responsiveImage {\n      ...DatoImage_responsiveImage\n    }\n  }\n  socialLabel\n  socials {\n    id\n    name\n    url\n    icon {\n      url\n    }\n  }\n  featuredCollections {\n    id\n    name\n  }\n}": types.HeroSectionFragmentDoc,
    "fragment MaterialShowcase on MaterialShowcaseSectionRecord {\n  id\n  _modelApiKey\n  title\n  subDescription\n  description\n  materials {\n    id\n    name\n    slug\n    details {\n      image {\n        responsiveImage {\n          ...DatoImage_responsiveImage\n        }\n      }\n    }\n  }\n}": types.MaterialShowcaseFragmentDoc,
    "fragment CollectionCardShowcase on CollectionCardShowcaseSectionRecord {\n  id\n  _modelApiKey\n  title\n  pretitle\n  direction\n  button {\n    label\n    slug\n    id\n  }\n  collection {\n    name\n    slug\n    details {\n      image {\n        responsiveImage {\n          ...DatoImage_responsiveImage\n        }\n      }\n    }\n  }\n  description\n}": types.CollectionCardShowcaseFragmentDoc,
    "fragment TestimonialSection on TestimonialSectionRecord {\n  id\n  _modelApiKey\n  title\n  testimonial {\n    id\n    testimonial\n    author\n  }\n}": types.TestimonialSectionFragmentDoc,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query Home($locale: SiteLocale, $fallbackLocale: [SiteLocale!]) {\n  home(locale: $locale, fallbackLocales: $fallbackLocale) {\n    seo: _seoMetaTags {\n      attributes\n      content\n      tag\n    }\n    sections {\n      ... on RecordInterface {\n        id\n        __typename\n      }\n      ... on HeroSectionRecord {\n        ...HeroSection\n      }\n      ... on DividerSectionRecord {\n        ...DividerSection\n      }\n      ... on TestimonialSectionRecord {\n        ...TestimonialSection\n      }\n      ... on CollectionCardShowcaseSectionRecord {\n        ...CollectionCardShowcase\n      }\n      ... on MaterialShowcaseSectionRecord {\n        ...MaterialShowcase\n      }\n    }\n  }\n}"): (typeof documents)["query Home($locale: SiteLocale, $fallbackLocale: [SiteLocale!]) {\n  home(locale: $locale, fallbackLocales: $fallbackLocale) {\n    seo: _seoMetaTags {\n      attributes\n      content\n      tag\n    }\n    sections {\n      ... on RecordInterface {\n        id\n        __typename\n      }\n      ... on HeroSectionRecord {\n        ...HeroSection\n      }\n      ... on DividerSectionRecord {\n        ...DividerSection\n      }\n      ... on TestimonialSectionRecord {\n        ...TestimonialSection\n      }\n      ... on CollectionCardShowcaseSectionRecord {\n        ...CollectionCardShowcase\n      }\n      ... on MaterialShowcaseSectionRecord {\n        ...MaterialShowcase\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query LegalPage($slug: String, $locale: SiteLocale, $fallbackLocale: [SiteLocale!]) {\n  legalPage(\n    filter: {slug: {eq: $slug}}\n    locale: $locale\n    fallbackLocales: $fallbackLocale\n  ) {\n    seo: _seoMetaTags {\n      attributes\n      content\n      tag\n    }\n    content {\n      value\n    }\n  }\n}"): (typeof documents)["query LegalPage($slug: String, $locale: SiteLocale, $fallbackLocale: [SiteLocale!]) {\n  legalPage(\n    filter: {slug: {eq: $slug}}\n    locale: $locale\n    fallbackLocales: $fallbackLocale\n  ) {\n    seo: _seoMetaTags {\n      attributes\n      content\n      tag\n    }\n    content {\n      value\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query Layout($locale: SiteLocale, $fallbackLocale: [SiteLocale!]) {\n  _site {\n    faviconMetaTags {\n      attributes\n      content\n      tag\n    }\n    globalSeo {\n      fallbackSeo {\n        title\n        description\n      }\n    }\n    favicon {\n      url\n    }\n  }\n  layout(locale: $locale, fallbackLocales: $fallbackLocale) {\n    copyrightText\n    socialMediaLinks {\n      id\n      name\n      url\n      icon {\n        url\n      }\n    }\n    footerSubtitle\n    footerTitle\n    footerLogo {\n      responsiveImage {\n        src\n      }\n    }\n    footerColumns {\n      id\n      label\n      footerItem {\n        id\n        label\n        slug\n      }\n    }\n    cookieNotice {\n      primaryButtonLabel\n      secondaryButtonLabel\n      subheader\n      header\n      cookieNoticeImage {\n        responsiveImage {\n          ...DatoImage_responsiveImage\n        }\n      }\n    }\n    mainColor {\n      red\n      blue\n      green\n    }\n    popup {\n      title\n      underText\n      subtitle\n      preTitle\n      dismissButtonLabel\n      button {\n        label\n        slug\n      }\n      popupImage {\n        responsiveImage {\n          ...DatoImage_responsiveImage\n        }\n      }\n    }\n    logo {\n      url\n      responsiveImage {\n        ...DatoImage_responsiveImage\n      }\n    }\n    notification {\n      value\n    }\n    menu {\n      ... on DropdownMenuRecord {\n        id\n        label\n        _modelApiKey\n        column {\n          label\n          id\n          item {\n            ... on ProductRecord {\n              slug\n              _modelApiKey\n              id\n              name\n            }\n            ... on MaterialRecord {\n              slug\n              id\n              _modelApiKey\n              name\n            }\n            ... on CollectionRecord {\n              slug\n              id\n              _modelApiKey\n              name\n            }\n            ... on BrandRecord {\n              slug\n              id\n              _modelApiKey\n              name\n            }\n          }\n        }\n        trending {\n          ... on MaterialRecord {\n            id\n            name\n            slug\n            _modelApiKey\n            details {\n              image {\n                responsiveImage {\n                  ...DatoImage_responsiveImage\n                }\n              }\n            }\n          }\n          ... on CollectionRecord {\n            id\n            name\n            slug\n            _modelApiKey\n            details {\n              image {\n                responsiveImage {\n                  ...DatoImage_responsiveImage\n                }\n              }\n            }\n          }\n          ... on BrandRecord {\n            id\n            name\n            slug\n            _modelApiKey\n            details {\n              image {\n                responsiveImage {\n                  ...DatoImage_responsiveImage\n                }\n              }\n            }\n          }\n        }\n        newArrival {\n          ... on MaterialRecord {\n            id\n            name\n            slug\n            _modelApiKey\n            details {\n              image {\n                responsiveImage {\n                  ...DatoImage_responsiveImage\n                }\n              }\n            }\n          }\n          ... on CollectionRecord {\n            id\n            name\n            slug\n            _modelApiKey\n            details {\n              image {\n                responsiveImage {\n                  ...DatoImage_responsiveImage\n                }\n              }\n            }\n          }\n          ... on BrandRecord {\n            id\n            name\n            slug\n            _modelApiKey\n            details {\n              image {\n                responsiveImage {\n                  ...DatoImage_responsiveImage\n                }\n              }\n            }\n          }\n        }\n      }\n      ... on LinkItemRecord {\n        id\n        label\n        slug\n        _modelApiKey\n      }\n    }\n  }\n  _site {\n    locales\n  }\n  generalInterface(locale: $locale, fallbackLocales: $fallbackLocale) {\n    currencySymbol\n    trending\n    new\n    shopNow\n    searchPlaceholder\n    newsletter\n    subscribeToOurNewsletter\n    newsletterButton\n    emailPlaceholder\n    displayNewsletterFooter\n  }\n}"): (typeof documents)["query Layout($locale: SiteLocale, $fallbackLocale: [SiteLocale!]) {\n  _site {\n    faviconMetaTags {\n      attributes\n      content\n      tag\n    }\n    globalSeo {\n      fallbackSeo {\n        title\n        description\n      }\n    }\n    favicon {\n      url\n    }\n  }\n  layout(locale: $locale, fallbackLocales: $fallbackLocale) {\n    copyrightText\n    socialMediaLinks {\n      id\n      name\n      url\n      icon {\n        url\n      }\n    }\n    footerSubtitle\n    footerTitle\n    footerLogo {\n      responsiveImage {\n        src\n      }\n    }\n    footerColumns {\n      id\n      label\n      footerItem {\n        id\n        label\n        slug\n      }\n    }\n    cookieNotice {\n      primaryButtonLabel\n      secondaryButtonLabel\n      subheader\n      header\n      cookieNoticeImage {\n        responsiveImage {\n          ...DatoImage_responsiveImage\n        }\n      }\n    }\n    mainColor {\n      red\n      blue\n      green\n    }\n    popup {\n      title\n      underText\n      subtitle\n      preTitle\n      dismissButtonLabel\n      button {\n        label\n        slug\n      }\n      popupImage {\n        responsiveImage {\n          ...DatoImage_responsiveImage\n        }\n      }\n    }\n    logo {\n      url\n      responsiveImage {\n        ...DatoImage_responsiveImage\n      }\n    }\n    notification {\n      value\n    }\n    menu {\n      ... on DropdownMenuRecord {\n        id\n        label\n        _modelApiKey\n        column {\n          label\n          id\n          item {\n            ... on ProductRecord {\n              slug\n              _modelApiKey\n              id\n              name\n            }\n            ... on MaterialRecord {\n              slug\n              id\n              _modelApiKey\n              name\n            }\n            ... on CollectionRecord {\n              slug\n              id\n              _modelApiKey\n              name\n            }\n            ... on BrandRecord {\n              slug\n              id\n              _modelApiKey\n              name\n            }\n          }\n        }\n        trending {\n          ... on MaterialRecord {\n            id\n            name\n            slug\n            _modelApiKey\n            details {\n              image {\n                responsiveImage {\n                  ...DatoImage_responsiveImage\n                }\n              }\n            }\n          }\n          ... on CollectionRecord {\n            id\n            name\n            slug\n            _modelApiKey\n            details {\n              image {\n                responsiveImage {\n                  ...DatoImage_responsiveImage\n                }\n              }\n            }\n          }\n          ... on BrandRecord {\n            id\n            name\n            slug\n            _modelApiKey\n            details {\n              image {\n                responsiveImage {\n                  ...DatoImage_responsiveImage\n                }\n              }\n            }\n          }\n        }\n        newArrival {\n          ... on MaterialRecord {\n            id\n            name\n            slug\n            _modelApiKey\n            details {\n              image {\n                responsiveImage {\n                  ...DatoImage_responsiveImage\n                }\n              }\n            }\n          }\n          ... on CollectionRecord {\n            id\n            name\n            slug\n            _modelApiKey\n            details {\n              image {\n                responsiveImage {\n                  ...DatoImage_responsiveImage\n                }\n              }\n            }\n          }\n          ... on BrandRecord {\n            id\n            name\n            slug\n            _modelApiKey\n            details {\n              image {\n                responsiveImage {\n                  ...DatoImage_responsiveImage\n                }\n              }\n            }\n          }\n        }\n      }\n      ... on LinkItemRecord {\n        id\n        label\n        slug\n        _modelApiKey\n      }\n    }\n  }\n  _site {\n    locales\n  }\n  generalInterface(locale: $locale, fallbackLocales: $fallbackLocale) {\n    currencySymbol\n    trending\n    new\n    shopNow\n    searchPlaceholder\n    newsletter\n    subscribeToOurNewsletter\n    newsletterButton\n    emailPlaceholder\n    displayNewsletterFooter\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query Showcase($locale: SiteLocale, $fallbackLocale: [SiteLocale!]) {\n  generalInterface(locale: $locale, fallbackLocales: $fallbackLocale) {\n    currencySymbol\n  }\n  showcase(locale: $locale, fallbackLocales: $fallbackLocale) {\n    seo: _seoMetaTags {\n      attributes\n      content\n      tag\n    }\n    title\n    newProductsTitle\n    newProducts {\n      id\n      slug\n      sale\n      salePrice\n      name\n      productImages {\n        responsiveImage {\n          ...DatoImage_responsiveImage\n        }\n        copyright\n      }\n      price\n    }\n    materialsTitle\n    materialsDisplay {\n      responsiveImage {\n        ...DatoImage_responsiveImage\n      }\n    }\n    materialsDescription\n    description\n    displays {\n      responsiveImage {\n        ...DatoImage_responsiveImage\n      }\n    }\n    cta {\n      id\n      label\n      slug\n    }\n    collections {\n      name\n      slug\n      id\n      details {\n        image {\n          responsiveImage {\n            ...DatoImage_responsiveImage\n          }\n        }\n      }\n    }\n    collectionsCta {\n      label\n      slug\n      id\n    }\n  }\n}"): (typeof documents)["query Showcase($locale: SiteLocale, $fallbackLocale: [SiteLocale!]) {\n  generalInterface(locale: $locale, fallbackLocales: $fallbackLocale) {\n    currencySymbol\n  }\n  showcase(locale: $locale, fallbackLocales: $fallbackLocale) {\n    seo: _seoMetaTags {\n      attributes\n      content\n      tag\n    }\n    title\n    newProductsTitle\n    newProducts {\n      id\n      slug\n      sale\n      salePrice\n      name\n      productImages {\n        responsiveImage {\n          ...DatoImage_responsiveImage\n        }\n        copyright\n      }\n      price\n    }\n    materialsTitle\n    materialsDisplay {\n      responsiveImage {\n        ...DatoImage_responsiveImage\n      }\n    }\n    materialsDescription\n    description\n    displays {\n      responsiveImage {\n        ...DatoImage_responsiveImage\n      }\n    }\n    cta {\n      id\n      label\n      slug\n    }\n    collections {\n      name\n      slug\n      id\n      details {\n        image {\n          responsiveImage {\n            ...DatoImage_responsiveImage\n          }\n        }\n      }\n    }\n    collectionsCta {\n      label\n      slug\n      id\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query Stores($locale: SiteLocale, $fallbackLocale: [SiteLocale!]) {\n  allStores(locale: $locale, fallbackLocales: $fallbackLocale) {\n    seo: _seoMetaTags {\n      attributes\n      content\n      tag\n    }\n    country\n    id\n    storeDescription\n    storeName\n    storeLocation {\n      latitude\n      longitude\n    }\n    storeImage {\n      responsiveImage {\n        src\n      }\n    }\n  }\n  generalInterface(locale: $locale, fallbackLocales: $fallbackLocale) {\n    findOnMaps\n  }\n}"): (typeof documents)["query Stores($locale: SiteLocale, $fallbackLocale: [SiteLocale!]) {\n  allStores(locale: $locale, fallbackLocales: $fallbackLocale) {\n    seo: _seoMetaTags {\n      attributes\n      content\n      tag\n    }\n    country\n    id\n    storeDescription\n    storeName\n    storeLocation {\n      latitude\n      longitude\n    }\n    storeImage {\n      responsiveImage {\n        src\n      }\n    }\n  }\n  generalInterface(locale: $locale, fallbackLocales: $fallbackLocale) {\n    findOnMaps\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query Locales {\n  _site {\n    locales\n  }\n}"): (typeof documents)["query Locales {\n  _site {\n    locales\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment DatoImage_responsiveImage on ResponsiveImage {\n  src\n  srcSet\n  base64\n  width\n  height\n  alt\n  title\n}"): (typeof documents)["fragment DatoImage_responsiveImage on ResponsiveImage {\n  src\n  srcSet\n  base64\n  width\n  height\n  alt\n  title\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment DividerSection on DividerSectionRecord {\n  id\n  _modelApiKey\n  title\n  subtitle\n  preTitle\n  button {\n    label\n    slug\n  }\n}"): (typeof documents)["fragment DividerSection on DividerSectionRecord {\n  id\n  _modelApiKey\n  title\n  subtitle\n  preTitle\n  button {\n    label\n    slug\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment HeroSection on HeroSectionRecord {\n  _modelApiKey\n  id\n  heroSubtitle\n  heroTitle\n  heroImage {\n    responsiveImage {\n      ...DatoImage_responsiveImage\n    }\n  }\n  additionalImage {\n    responsiveImage {\n      ...DatoImage_responsiveImage\n    }\n  }\n  socialLabel\n  socials {\n    id\n    name\n    url\n    icon {\n      url\n    }\n  }\n  featuredCollections {\n    id\n    name\n  }\n}"): (typeof documents)["fragment HeroSection on HeroSectionRecord {\n  _modelApiKey\n  id\n  heroSubtitle\n  heroTitle\n  heroImage {\n    responsiveImage {\n      ...DatoImage_responsiveImage\n    }\n  }\n  additionalImage {\n    responsiveImage {\n      ...DatoImage_responsiveImage\n    }\n  }\n  socialLabel\n  socials {\n    id\n    name\n    url\n    icon {\n      url\n    }\n  }\n  featuredCollections {\n    id\n    name\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment MaterialShowcase on MaterialShowcaseSectionRecord {\n  id\n  _modelApiKey\n  title\n  subDescription\n  description\n  materials {\n    id\n    name\n    slug\n    details {\n      image {\n        responsiveImage {\n          ...DatoImage_responsiveImage\n        }\n      }\n    }\n  }\n}"): (typeof documents)["fragment MaterialShowcase on MaterialShowcaseSectionRecord {\n  id\n  _modelApiKey\n  title\n  subDescription\n  description\n  materials {\n    id\n    name\n    slug\n    details {\n      image {\n        responsiveImage {\n          ...DatoImage_responsiveImage\n        }\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment CollectionCardShowcase on CollectionCardShowcaseSectionRecord {\n  id\n  _modelApiKey\n  title\n  pretitle\n  direction\n  button {\n    label\n    slug\n    id\n  }\n  collection {\n    name\n    slug\n    details {\n      image {\n        responsiveImage {\n          ...DatoImage_responsiveImage\n        }\n      }\n    }\n  }\n  description\n}"): (typeof documents)["fragment CollectionCardShowcase on CollectionCardShowcaseSectionRecord {\n  id\n  _modelApiKey\n  title\n  pretitle\n  direction\n  button {\n    label\n    slug\n    id\n  }\n  collection {\n    name\n    slug\n    details {\n      image {\n        responsiveImage {\n          ...DatoImage_responsiveImage\n        }\n      }\n    }\n  }\n  description\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment TestimonialSection on TestimonialSectionRecord {\n  id\n  _modelApiKey\n  title\n  testimonial {\n    id\n    testimonial\n    author\n  }\n}"): (typeof documents)["fragment TestimonialSection on TestimonialSectionRecord {\n  id\n  _modelApiKey\n  title\n  testimonial {\n    id\n    testimonial\n    author\n  }\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;